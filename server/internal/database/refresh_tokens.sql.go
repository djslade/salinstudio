// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, user_id, created_at, expires_at)
VALUES ($1, $2, NOW(), $3)
RETURNING token, user_id, created_at, expires_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const extendRefreshToken = `-- name: ExtendRefreshToken :exec
UPDATE refresh_tokens SET expires_at=$1 WHERE token=$2
`

type ExtendRefreshTokenParams struct {
	ExpiresAt time.Time
	Token     string
}

func (q *Queries) ExtendRefreshToken(ctx context.Context, arg ExtendRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, extendRefreshToken, arg.ExpiresAt, arg.Token)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET expires_at=NOW() WHERE token=$1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
