// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: images.sql

package database

import (
	"context"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images(id, image_url_full, image_url_mobile, image_url_thumb, index, category, title_en, title_fi, created_at)
VALUES (GEN_RANDOM_UUID(), $1, $2, $3, 0, $4, $5, $6, NOW())
RETURNING id, image_url_full, image_url_mobile, image_url_thumb, index, category, title_en, title_fi, created_at
`

type CreateImageParams struct {
	ImageUrlFull   string
	ImageUrlMobile string
	ImageUrlThumb  string
	Category       string
	TitleEn        string
	TitleFi        string
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage,
		arg.ImageUrlFull,
		arg.ImageUrlMobile,
		arg.ImageUrlThumb,
		arg.Category,
		arg.TitleEn,
		arg.TitleFi,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ImageUrlFull,
		&i.ImageUrlMobile,
		&i.ImageUrlThumb,
		&i.Index,
		&i.Category,
		&i.TitleEn,
		&i.TitleFi,
		&i.CreatedAt,
	)
	return i, err
}

const getImagesByCategory = `-- name: GetImagesByCategory :many
SELECT id, image_url_full, image_url_mobile, image_url_thumb, index, category, title_en, title_fi, created_at FROM images WHERE category=$1
`

func (q *Queries) GetImagesByCategory(ctx context.Context, category string) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImagesByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrlFull,
			&i.ImageUrlMobile,
			&i.ImageUrlThumb,
			&i.Index,
			&i.Category,
			&i.TitleEn,
			&i.TitleFi,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
